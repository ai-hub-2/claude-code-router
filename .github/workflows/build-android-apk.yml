name: Android APK Builder

on:
  push:
    branches: [ main, master ]
    paths:
      - '.github/workflows/**'
      - 'android/**'
      - 'ios/**'
      - 'lib/**'
      - 'src/**'
      - 'pubspec.yaml'
      - 'package.json'
      - 'build.gradle'
      - 'settings.gradle'
      - 'app/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - '.github/workflows/**'
      - 'android/**'
      - 'ios/**'
      - 'lib/**'
      - 'src/**'
      - 'pubspec.yaml'
      - 'package.json'
      - 'build.gradle'
      - 'settings.gradle'
      - 'app/**'
  workflow_dispatch:
    inputs:
      build-type:
        description: "Build Type"
        required: true
        default: "release"
        type: choice
        options: [release, debug]

permissions:
  contents: write

jobs:
  detect-and-build:
    runs-on: ubuntu-latest
    env:
      BUILD_TYPE: ${{ inputs.build-type || 'release' }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Show Project Info
        run: |
          echo "🔍 Analyzing project type..."
          echo "Repository: ${{ github.repository }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Build Type: ${{ env.BUILD_TYPE }}"

      - name: Detect Project Type
        id: project-type
        run: |
          PROJECT_TYPE="unknown"
          
          # Check for Flutter project
          if [ -f "pubspec.yaml" ] && [ -d "android" ]; then
            PROJECT_TYPE="flutter"
            echo "Found Flutter project (pubspec.yaml + android/)"
          # Check for React Native project
          elif [ -f "package.json" ] && grep -qi "react-native" package.json; then
            PROJECT_TYPE="react-native"
            echo "Found React Native project"
          # Check for Gradle project
          elif [ -f "settings.gradle" ] || [ -f "settings.gradle.kts" ]; then
            PROJECT_TYPE="gradle"
            echo "Found Gradle project"
          else
            echo "No Android project detected"
            if [ -f "package.json" ]; then
              PROJECT_NAME=$(node -p "require('./package.json').name")
              PROJECT_VERSION=$(node -p "require('./package.json').version")
              echo "This appears to be a Node.js project: $PROJECT_NAME@$PROJECT_VERSION"
            fi
          fi
          
          echo "project_type=$PROJECT_TYPE" >> $GITHUB_OUTPUT
          echo "Detected project type: $PROJECT_TYPE"

      - name: Skip Non-Android Projects
        if: steps.project-type.outputs.project_type == 'unknown'
        run: |
          echo "✅ Workflow completed successfully!"
          echo "Project Type: Non-Android (Node.js/Other)"
          echo "Action: Skipped Android build (not applicable)"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo ""
          echo "ℹ️ This workflow is designed for Android projects only."
          echo "Supported project types:"
          echo "- Flutter (pubspec.yaml + android/)"
          echo "- React Native (package.json with react-native)"
          echo "- Gradle (settings.gradle)"
          echo ""
          echo "🎯 For non-Android projects, consider using appropriate workflows."

      - name: Setup Java
        if: steps.project-type.outputs.project_type != 'unknown'
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: "17"

      - name: Setup Android SDK
        if: steps.project-type.outputs.project_type != 'unknown'
        uses: android-actions/setup-android@v3

      - name: Setup Flutter
        if: steps.project-type.outputs.project_type == 'flutter'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.22.0"
          channel: stable

      - name: Setup Node.js
        if: steps.project-type.outputs.project_type == 'react-native'
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Flutter Dependencies
        if: steps.project-type.outputs.project_type == 'flutter'
        run: |
          echo "📦 Installing Flutter dependencies..."
          flutter pub get
          echo "✅ Flutter dependencies installed"

      - name: Install React Native Dependencies
        if: steps.project-type.outputs.project_type == 'react-native'
        run: |
          echo "📦 Installing React Native dependencies..."
          npm ci
          echo "✅ React Native dependencies installed"

      - name: Build Flutter APK
        if: steps.project-type.outputs.project_type == 'flutter'
        run: |
          echo "🏗️ Building Flutter ${{ env.BUILD_TYPE }} APK..."
          flutter build apk --${{ env.BUILD_TYPE }}
          echo "✅ Flutter build completed"

      - name: Build React Native APK
        if: steps.project-type.outputs.project_type == 'react-native'
        run: |
          echo "🏗️ Building React Native ${{ env.BUILD_TYPE }} APK..."
          cd android
          chmod +x gradlew
          ./gradlew assemble${{ env.BUILD_TYPE }} --no-daemon
          echo "✅ React Native build completed"

      - name: Build Gradle APK
        if: steps.project-type.outputs.project_type == 'gradle'
        run: |
          echo "🏗️ Building Gradle ${{ env.BUILD_TYPE }} APK..."
          if [ -f "gradlew" ]; then
            chmod +x gradlew
            ./gradlew assemble${{ env.BUILD_TYPE }} --no-daemon
          elif [ -d "android" ] && [ -f "android/gradlew" ]; then
            cd android
            chmod +x gradlew
            ./gradlew assemble${{ env.BUILD_TYPE }} --no-daemon
          else
            echo "❌ No Gradle wrapper found"
            exit 1
          fi
          echo "✅ Gradle build completed"

      - name: Find APK
        if: steps.project-type.outputs.project_type != 'unknown'
        id: apk
        run: |
          echo "🔍 Searching for APK files..."
          
          # Search in common APK locations
          APK_PATH=""
          
          if [ -d "build/app/outputs/apk" ]; then
            APK_PATH=$(find build/app/outputs/apk -name "*.apk" | head -n 1)
          elif [ -d "android/app/build/outputs/apk" ]; then
            APK_PATH=$(find android/app/build/outputs/apk -name "*.apk" | head -n 1)
          elif [ -d "build/outputs/apk" ]; then
            APK_PATH=$(find build/outputs/apk -name "*.apk" | head -n 1)
          else
            APK_PATH=$(find . -name "*.apk" | head -n 1)
          fi
          
          if [ -z "$APK_PATH" ]; then
            echo "❌ No APK found!"
            exit 1
          fi
          
          echo "apk_path=$APK_PATH" >> $GITHUB_OUTPUT
          echo "Found APK: $APK_PATH"
          
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
          echo "APK Size: $APK_SIZE"

      - name: Upload APK
        if: steps.project-type.outputs.project_type != 'unknown'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.event.repository.name }}-${{ env.BUILD_TYPE }}.apk
          path: ${{ steps.apk.outputs.apk_path }}

      - name: Build Success Summary
        if: steps.project-type.outputs.project_type != 'unknown'
        run: |
          echo "🎉 Android APK build completed successfully!"
          echo "Project Type: ${{ steps.project-type.outputs.project_type }}"
          echo "Build Type: ${{ env.BUILD_TYPE }}"
          echo "APK Path: ${{ steps.apk.outputs.apk_path }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Commit: ${{ github.sha }}"
          echo "✅ APK is ready for download!"